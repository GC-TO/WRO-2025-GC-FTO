inventor_hub = InventorHub(top_side=-Axis.Y, front_side=-Axis.X)
color_sensor = ColorSensor(Port.A)
d_derecho = UltrasonicSensor(Port.B)
d_izquierdo = UltrasonicSensor(Port.C)
traccion = Motor(Port.F, Direction.CLOCKWISE)
direccion = Motor(Port.D, Direction.CLOCKWISE)
car = Car(direccion, traccion)

# Variables
linea_roja = 0
Limite_inferior_Clockwise = 78
Limite_superior_Clockwise = 91
Limite_inferior_Counterclockwise = -78
Limite_supeior_Counterclockwise_ = -91
data_2 = 0
Giros = 0
color = 0
Linea_Roja = 0
Linea_Azul = 0
Direction = 0
Primera_Linea = 0

async def subtask():
    while True:
        await wait(0)
        if await d_derecho.distance() / await d_izquierdo.distance() < 0.95:
            print(await d_derecho.distance() / await d_izquierdo.distance(), 'division')
            if await d_izquierdo.distance() > 1000:
                print('Ditancia erronea', await d_izquierdo.distance())
            print('direccionado cerca ')

        elif await d_derecho.distance() / await d_izquierdo.distance() > 1.1:
            # derecha mayor izquierda menor
            if await d_derecho.distance() > 1000:
                print('Ditancia erronea', await d_derecho.distance())
            print('direccionando lejos')
            print(await d_derecho.distance() / await d_izquierdo.distance())

        else:
            continue

async def subtask2():
    global Primera_Linea, Direction

async def Clockwise():
    global linea_roja, Limite_inferior_Clockwise, Limite_superior_Clockwise
    await wait(0)
    while not await d_derecho.distance() > 1000:
        await wait(0)
    inventor_hub.display.char('A')
    print('salio de loop')

async def Counterclockwise():
    global linea_roja, Limite_inferior_Counterclockwise, Limite_supeior_Counterclockwise_
    await wait(0)
    while not await d_izquierdo.distance() > 1000:
        await wait(0)
    inventor_hub.display.char('B')
    print('salio de loop')3


async def main():
    global Primera_Linea, Direction, Giros
    inventor_hub.imu.reset_heading(0)
    await wait(500)
    car.drive_power(75)
    while Giros < 12:
        await wait(0)
        await multitask(
            subtask(),
            subtask2(),
            race=True,
        )
        if Direction == 10:
            print('Girando Counterclockwise')
            await Counterclockwise()
        else:
            print('Girando Clockwise')
            await Clockwise()
        Giros = Giros + 1
        inventor_hub.light.off()
    await wait(2500)
    print(watch_2.time())


run_task(main())
